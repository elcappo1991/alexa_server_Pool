#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MobileAcces:server');
var http = require('http');
var models =require('../models')





//models.sequelize.sync({ force: true }).then(function () { // in case we need to reload database config
//models.sequelize.sync().then(function () {
//console.log('tables created');
// models.user.create({first_name:'wejd',last_name:'daghfous',password:"U2FsdGVkX19DlHajtMD2TvJlIZaMTPU0qavy2lVKjxw=",email:'wejd.daghfous@esprit.tn',address:'13 rue de monastir, sidi achour', code_postal:'8000', city:'nabeul', country:'tunisia',flag:1});
//});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5050');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/*var io=require('socket.io').listen(server);
var clients=[]

io.sockets.on('connection',function(socket){
  console.log('Un clisnt est connecte',socket.id)
  clients.push(socket);
  socket.on('data', function (data) {
        console.log(data.toString());
  });
  
  socket.on('disconnect',function(){
    var index = clients.indexOf(socket);
    if(index != -1 ){
	clients.splice(index,1);
        console.log('client disconnected');
     }


  })

})

*/


var clients=[]
require('net').createServer(function (socket) {
    console.log("connected");
    


    socket.on('data', function (data) {
      socket.name=data.toString()
      socket.linked=false

      clients.push(socket);
      socket.write('connected to server')
        console.log(data.toString()); 
    });



    socket.on('close',function(){
        var index = clients.indexOf(socket);
        if(index != -1 ){
        clients.splice(index,1);
        console.log('client close');
       }
    });

    var sendSocketToSpeaker=function(name,action,callback){
        
       
        clients.forEach(function(client){
          if (client.name==name){
                console.log('bin/www result ',client.write(action))
                callback(client.write(action))
              }else {
               callback(false)
            }

            })

    }
exports.sendSocketToSpeaker=sendSocketToSpeaker;

    

}).listen(7070,function(){

  console.log('listen on port 7070')
});




    /* setInterval(function(){
 

var randomClient;
if(clients.length > 0){
  randomClient= Math.floor(Math.random() * clients.length);
  clients[1].write('foo'); 

}

},6000)*/

exports.clients = clients;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log('server http listening on 5050')
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
